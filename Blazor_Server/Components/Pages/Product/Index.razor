@page "/products"
@attribute [StreamRendering]

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_loading)
{
    <_Loading />
}
else
{
    <table class="table table-hover table-sm table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Category</th>
                <th>Description</th>
                <th>Image</th>
                <th>
                    <a class="btn btn-primary px-3" href="product/create"><i class="bi bi-plus-circle"></i> Create</a>
                    <button class="btn btn-primary px-3" @onclick="async () => await _createUpdateModal.Show(0)"><i class="bi bi-plus-circle"></i> Create Modal</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Category!.Name</td>
                    <td>@item.Description</td>
                    <td>
                        @if (string.IsNullOrEmpty(item.ImageUrl) == false)
                        {
                            <img src="@item.ImageUrl" alt="" class="img-thumbnail" width="100" />
                        }
                    </td>
                    <td>
                        <a class="btn btn-warning px-3" href="product/update/@item.Id"><i class="bi bi-pencil-square"></i> Update</a>
                        <button class="btn btn-warning px-3" @onclick="async () => await _createUpdateModal.Show(item.Id)"><i class="bi bi-pencil-square"></i> Update Modal</button>
                        <button class="btn btn-danger px-3" @onclick="async () => await delete(item.Id)"><i class="bi bi-trash"></i> Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<CreateUpdateModal @ref="_createUpdateModal" OnClose="modalClosed" />

@code {
    private string _title = "Products";
    private bool _loading = true;

    private CreateUpdateModal _createUpdateModal;

    private IEnumerable<ProductDto> _items = new List<ProductDto>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await load();
        }
    }

    private async Task load()
    {
        _loading = true;

        _items = (await _productRepository.Get()).OrderByDescending(x => x.Id).ToList();

        _loading = false;
        StateHasChanged();
    }

    private async Task delete(int id)
    {
        if (await _jSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await _productRepository.Delete(id);
            await _jSRuntime.ToastrSuccess("Deleted");
        }
        await load();
    }

    private async Task modalClosed()
    {
        await load();
    }
}
