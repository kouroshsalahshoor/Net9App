@page "/product/create"
@page "/product/update/{id:int}"
@using System.IO
@inject IFileUpload _fileUpload

@attribute [StreamRendering]

<PageTitle>@_title Product</PageTitle>

<h1>@_title Product</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        @if (_loading)
        {
            <_Loading />
        }
        else
        {
            <EditForm method="post" Model="_dto" OnValidSubmit="save" FormName="createUpdate" Enhance>

                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <div class="mb-3">
                    <label for="id" class="form-label">Id</label>
                    <input id="id" value="@_dto.Id" class="form-control" disabled />
                </div>

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="_dto.Name" class="form-control" />
                    <ValidationMessage For="() => _dto.Name" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="Description" class="form-label">Description</label>
                    <InputTextArea id="Description" @bind-Value="_dto.Description" class="form-control" />
                    <ValidationMessage For="() => _dto.Description" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="Category" class="form-label">Category</label>
                    <InputSelect @bind-Value="_dto.CategoryId" class="form-select" id="Category">
                        <option value="0" disabled="disabled" selected>-- Please select a Category --</option>
                        @foreach (var item in _categories)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => _dto.CategoryId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="image" class="form-label">Image</label>
                    <InputFile id="image" OnChange="loadFiles" class="form-control" accept="image/x-png,image/jpeg,image/x-jpeg" />
                    <ValidationMessage For="() => _dto.ImageUrl" class="text-danger" />

                    @if (string.IsNullOrEmpty(_dto.ImageUrl) == false)
                    {
                        <div class="row m-3">
                            <img src="@_dto.ImageUrl" alt="" class="img-thumbnail" />
                            <i class="bi-trash btn btn-outline-danger" @onclick="removeImage">remove</i>
                        </div>
                    }
                </div>

                <div class="mb-3">
                    <button type="submit" class="btn btn-@(_title == "Create" ? "primary" : "warning")">@_title</button>
                    <a class="btn btn-light px-3" href="/products">Back to Index</a>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private string _title = string.Empty;
    private bool _loading = true;
    private bool _imageLoading = true;

    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private ProductDto _dto { get; set; } = new();
    private IEnumerable<CategoryDto> _categories { get; set; } = new List<CategoryDto>();

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        StateHasChanged();

        _categories = await _categoryRepository.Get();

        _title = "Create";
        _dto = new();

        if (Id > 0)
        {
            _title = "Update";

            _dto = await _productRepository.Get(Id);
            if (_dto is null)
            {
                await _jSRuntime.ToastrError("Item not found!");
            }
        }

        _loading = false;
        StateHasChanged();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task save()
    {
        if (Id == 0)
        {
            await _productRepository.Create(_dto);
            await _jSRuntime.ToastrSuccess("Created");
        }
        else
        {
            await _productRepository.Update(_dto);
            await _jSRuntime.ToastrSuccess("Updated");
        }

        _navigationManager.NavigateTo("/products");
    }

    private async Task loadFiles(InputFileChangeEventArgs args)
    {
        _imageLoading = true;
        StateHasChanged();

        try
        {
            if (args.GetMultipleFiles().Count > 0)
            {
                foreach (var file in args.GetMultipleFiles())
                {
                    var fileInfo = new FileInfo(file.Name);
                    var fileExt = fileInfo.Extension.ToLower();
                    if (fileExt == ".jpg" || fileExt == ".png" || fileExt == ".jpeg")
                    {
                        _dto.ImageUrl = await _fileUpload.UploadFile(file);
                    }
                    else
                    {
                        await _jSRuntime.ToastrError("Please upload .jpg .png .jpeg files only");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await _jSRuntime.ToastrError(ex.Message);
        }

        _imageLoading = false;
        StateHasChanged();
    }

    private async Task removeImage()
    {
        if (string.IsNullOrEmpty(_dto.ImageUrl) == false)
        {
            if (_fileUpload.DeleteFile(_dto.ImageUrl))
            {
                _dto.ImageUrl = string.Empty;
                await _jSRuntime.ToastrSuccess("Image deleted");
            }
            else
            {
                await _jSRuntime.ToastrWarning("No Image found!");
            }
        }
    }
}
