@attribute [StreamRendering]

<div class="modal fade" id="exampleModalCenteredScrollable" tabindex="-1" aria-labelledby="exampleModalCenteredScrollableTitle" style="display: none;" aria-hidden="true">

    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">

            @if (_loading)
            {
                <_Loading />
            }
            else
            {
                <EditForm method="post" Model="_dto" OnValidSubmit="save" FormName="createUpdate" Enhance>

                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalCenteredScrollableTitle">@_title Category</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="close"></button>
                    </div>
                    <div class="modal-body">

                        <div class="row">
                            <div class="col-md-12">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />

                                <_Error Message="@_errorMessage" />

                                <div class="mb-3">
                                    <label for="id" class="form-label">Id</label>
                                    <input id="id" value="@_dto.Id" class="form-control" disabled />
                                </div>

                                <div class="mb-3">
                                    <label for="name" class="form-label">Name</label>
                                    <InputText id="name" @bind-Value="_dto.Name" class="form-control" />
                                    <ValidationMessage For="() => _dto.Name" class="text-danger" />
                                </div>
                            </div>
                        </div>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal" @onclick="close">Close</button>
                        <button type="submit" class="btn btn-@(_title == "Create" ? "primary" : "warning")">@_title</button>
                    </div>

                </EditForm>

            }
        </div>
    </div>
</div>

@code {
    private bool _loading = true;
    private bool _saving = false;
    private string _title = string.Empty;
    private string _errorMessage = string.Empty;

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [SupplyParameterFromForm]
    private CategoryDto _dto { get; set; } = new();

    public async Task Show(int id)
    {
        Id = id;
        await _jSRuntime.InvokeVoidAsync("showModal", "exampleModalCenteredScrollable");

        await load();
    }

    private async Task load()
    {
        _loading = true;
        StateHasChanged();

        if (Id == 0)
        {
            _title = "Create";
        }
        else
        {
            _title = "Update";

            _dto = await _categoryRepository.Get(Id);
            if (_dto is null)
            {
                await _jSRuntime.ToastrError("Item not found!");
            }
        }

        _loading = false;
        StateHasChanged();
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task save()
    {
        _errorMessage = string.Empty;
        _saving = true;
        StateHasChanged();

        if (await _categoryRepository.GetByName(_dto.Name)! is not null)
        {
            _errorMessage = $"An item with the same name: {_dto.Name} already exists.";
        }
        else
        {
            if (Id == 0)
            {
                await _categoryRepository.Create(_dto);
                await _jSRuntime.ToastrSuccess("Created");
            }
            else
            {
                await _categoryRepository.Update(_dto);
                await _jSRuntime.ToastrSuccess("Updated");
            }
        }

        _saving = false;
        StateHasChanged();

        await close();
    }

    private async Task close()
    {
        await _jSRuntime.InvokeVoidAsync("hideModal", "exampleModalCenteredScrollable");

        // _show = false;
        await OnClose.InvokeAsync();
    }
}
