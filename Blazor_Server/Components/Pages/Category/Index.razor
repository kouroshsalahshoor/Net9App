@page "/categories"
@attribute [StreamRendering]

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>
<hr />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search by Name" aria-label="Search" aria-describedby="button-addon2"
           @bind-value="_searchText" @bind-value:event="oninput">
    <span class="input-group-text bg-warning text-light" id="basic-addon2"><i class="bi bi-search"></i> Search</span>
        @* <button class="btn btn-warning" type="button" id="button-addon2">
        <i class="bi bi-search"></i>
        Search
    </button> *@
</div>

@if (_loading)
{
    <_Loading />
}
else
{
    <table class="table table-hover table-sm table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>
                    <a class="btn btn-primary px-3" href="category/create">Create</a>
                    <button class="btn btn-primary px-3" @onclick="async () => await _createUpdateModal.Show(0)">Create Modal</button>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _filteredItems ?? _items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>
                        <a class="btn btn-warning px-3" href="category/update/@item.Id">Update</a>
                        <button class="btn btn-warning px-3" @onclick="async () => await _createUpdateModal.Show(item.Id)">Update Modal</button>
                        <button class="btn btn-danger px-3" @onclick="async () => await delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<CreateUpdateModal @ref="_createUpdateModal" OnClose="modalClosed" />

@code {
    private string _title = "Categories";
    private bool _loading = true;

    private CreateUpdateModal _createUpdateModal;

    private IEnumerable<CategoryDto> _items = new List<CategoryDto>();
    public string _searchText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await load();
        }
    }

    private async Task load()
    {
        _loading = true;
        // await Task.Delay(3000);

        _items = (await _categoryRepository.Get()).OrderBy(x => x.Name).ToList();

        _loading = false;
        StateHasChanged();
    }

    private List<CategoryDto> _filteredItems => _items.Where(
            x => x.Name.ToLower().Contains(_searchText.ToLower())).OrderBy(x=>x.Name).ToList();

    private async Task delete(int id)
    {
        if (await _jSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await _categoryRepository.Delete(id);
            await _jSRuntime.ToastrSuccess("Deleted");
        }
        await load();
    }

    private async Task modalClosed()
    {
        await load();
    }
}
