@page "/categories"
@attribute [StreamRendering]
@attribute [Authorize(Roles =Constants.Role_Admin)]

<PageTitle>@_title</PageTitle>

<style>
    th {
        position: sticky;
        top: 0;
    }
</style>

<h1>@_title</h1>
<hr />

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search by Name" aria-label="Search" aria-describedby="button-addon2"
           @bind-value="_searchText" @bind-value:event="oninput">
    <span class="input-group-text bg-warning text-light" id="basic-addon2" title="Search"><i class="bi bi-search"></i></span>
        @* <button class="btn btn-warning" type="button" id="button-addon2">
        <i class="bi bi-search"></i>
        Search
    </button> *@
</div>

@if (_loading)
{
    <_Loading />
}
else
{
    <div style="overflow:scroll; height:100vh;">
        <table class="table table-hover table-sm table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>
                        <a class="btn btn-primary btn-sm float-end mx-1" href="category/create" title="Create"><i class="bi bi-plus-square"></i></a>
                        <button class="btn btn-outline-primary btn-sm float-end mx-1" @onclick="async () => await _createUpdateModal.Show(0)" title="Create Modal"><i class="bi bi-plus-square"></i></button>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _filteredItems ?? _items)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td class="fit">
                            <button class="btn btn-danger btn-sm" @onclick="async () => await delete(item.Id)" title="Delete"><i class="bi bi-trash"></i></button>
                            <button class="btn btn-outline-warning btn-sm" @onclick="async () => await _createUpdateModal.Show(item.Id)" title="Update Modal"><i class="bi bi-pencil"></i></button>
                            <a class="btn btn-warning btn-sm" href="category/update/@item.Id" title="Update"><i class="bi bi-pencil"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<CreateUpdateModal @ref="_createUpdateModal" OnClose="modalClosed" />

@code {
    private string _title = "Categories";
    private bool _loading = true;

    private CreateUpdateModal _createUpdateModal = default!;

    private IEnumerable<CategoryDto> _items = new List<CategoryDto>();
    public string _searchText = "";

    [CascadingParameter]
    public Task<AuthenticationState> _authenticationState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationState;
        if (authState.User.Identity!.IsAuthenticated == false)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo("Account/Login?returnurl=" + uri.LocalPath, forceLoad: true);
        }
        else
        {
            if (authState.User.IsInRole(Constants.Role_Admin))
            {
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await load();
        }
    }

    private async Task load()
    {
        _loading = true;
        // await Task.Delay(3000);

        _items = (await _categoryRepository.Get()).OrderBy(x => x.Name).ToList();

        _loading = false;
        StateHasChanged();
    }

    private List<CategoryDto> _filteredItems => _items.Where(x => 
            x.Name.ToLower().Contains(_searchText.ToLower()) ||
            x.Id.ToString().ToLower().Contains(_searchText.ToLower())
    ).OrderBy(x => x.Name).ToList();

    private async Task delete(int id)
    {
        if (await _jSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await _categoryRepository.Delete(id);
            await _jSRuntime.ToastrSuccess("Deleted");
        }
        await load();
    }

    private async Task modalClosed()
    {
        await load();
    }
}
