@page "/categories"
@attribute [StreamRendering]

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_loading)
{
    <_Loading />
}
else
{
    <table class="table table-hover table-sm table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>
                    <a class="btn btn-primary" href="category/create">Create</a>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>
                        <a class="btn btn-warning" href="category/update/@item.Id">Update</a>
                        <button class="btn btn-danger" @onclick="async () => await delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private string _title = "Categories";
    private bool _loading = true;

    private IEnumerable<CategoryDto> _items = new List<CategoryDto>();

    // protected override async Task OnInitializedAsync()
    // {
    //     await load();
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await load();
        }
    }

    private async Task load()
    {
        _loading = true;
        await Task.Delay(3000);

        _items = await _categoryRepository.Get();

        _loading = false;
        StateHasChanged();
    }

    private async Task delete(int id)
    {
        if (await _jSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?"))
        {
            await _categoryRepository.Delete(id);
            await _jSRuntime.ToastrSuccess("Deleted");
        }
        await load();
    }
}
